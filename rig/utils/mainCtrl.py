import maya.cmds as mc
import maya.mel as mm

def snap( *args ) :
    mc.delete( mc.parentConstraint ( *args , mo = False ))
    mc.select( cl = True )

def transform( name = '' ) :
    return mc.createNode( 'transform' , n = name )

def multiplyDivide( name = '' ) :
    return mc.createNode( 'multiplyDivide' , n = name )

def createCurve( name = '' , shape = '' ) :

    crvDict = { 'sphere'        : [(0,1.250064,0,),(0,1,0,),(1.93883e-007,0.92388,-0.382683,),(3.58248e-007,0.707107,-0.707107,),(4.68074e-007,0.382683,-0.923879,),(5.06639e-007,0,-1,),(0,0,-1.250064,),(5.06639e-007,0,-1,),(4.68074e-007,-0.382683,-0.923879,),(3.58248e-007,-0.707107,-0.707107,),(1.93883e-007,-0.92388,-0.382683,),(0,-1,0,),(0,-1.250064,0,),(0,-1,0,),(-5.70243e-008,-0.92388,0.382683,),(-1.05367e-007,-0.707107,0.707107,),(-1.37669e-007,-0.382683,0.92388,),(-1.49012e-007,0,1,),(0,0,1.250064,),(-1.49012e-007,0,1,),(-1.37669e-007,0.382683,0.92388,),(-1.05367e-007,0.707107,0.707107,),(-5.70243e-008,0.92388,0.382683,),(0,1,0,),(0.382683,0.92388,0,),(0.707107,0.707107,0,),(0.92388,0.382683,0,),(1,0,0,),(1.250064,0,0,),(1,0,0,),(0.92388,-0.382683,0,),(0.707107,-0.707107,0,),(0.382683,-0.92388,0,),(0,-1,0,),(0,-1.250064,0,),(0,-1,0,),(-0.382683,-0.92388,-1.36858e-007,),(-0.707107,-0.707107,-2.52881e-007,),(-0.92388,-0.382683,-3.30405e-007,),(-1,0,-3.57628e-007,),(-1.250064,0,0,),(-1,0,-3.57628e-007,),(-0.92388,0,0.382683,),(-0.707107,0,0.707107,),(-0.382684,0,0.923879,),(-1.49012e-007,0,1,),(0.382683,0,0.92388,),(0.707107,0,0.707107,),(0.92388,0,0.382683,),(1,0,0,),(0.92388,0,-0.382683,),(0.707107,0,-0.707106,),(0.382684,0,-0.923879,),(5.06639e-007,0,-1,),(-0.382683,0,-0.92388,),(-0.707106,0,-0.707107,),(-0.923879,0,-0.382684,),(-1,0,-3.57628e-007,),(-0.92388,0.382683,-3.30405e-007,),(-0.707107,0.707107,-2.52881e-007,),(-0.382683,0.92388,-1.36858e-007,),(0,1,0)] ,
                'cylinder'      : [(-2.98023e-008,0.5,1,),(0.309017,0.5,0.951057,),(0.587785,0.5,0.809017,),(0.809017,0.5,0.587785,),(0.951057,0.5,0.309017,),(1,0.5,0,),(0.951057,0.5,-0.309017,),(0.809018,0.5,-0.587786,),(0.587786,0.5,-0.809017,),(0.309017,0.5,-0.951057,),(0,0.5,-1,),(-0.309017,0.5,-0.951057,),(-0.587785,0.5,-0.809017,),(-0.809017,0.5,-0.587785,),(-0.951057,0.5,-0.309017,),(-1,0.5,0,),(-0.951057,0.5,0.309017,),(-0.809017,0.5,0.587785,),(-0.587785,0.5,0.809017,),(-0.309017,0.5,0.951057,),(-2.98023e-008,0.5,1,),(-2.98023e-008,-0.5,1,),(0.309017,-0.5,0.951057,),(0.587785,-0.5,0.809017,),(0.698401,-0.5,0.698401,),(0.698401,0.5,0.698401,),(0.698401,-0.5,0.698401,),(0.809017,-0.5,0.587785,),(0.951057,-0.5,0.309017,),(1,-0.5,0,),(1,0.5,0,),(1,-0.5,0,),(0.951057,-0.5,-0.309017,),(0.809018,-0.5,-0.587786,),(0.698402,-0.5,-0.698402,),(0.698402,0.5,-0.698402,),(0.698402,-0.5,-0.698402,),(0.587786,-0.5,-0.809017,),(0.309017,-0.5,-0.951057,),(0,-0.5,-1,),(0,0.5,-1,),(0,-0.5,-1,),(-0.309017,-0.5,-0.951057,),(-0.587785,-0.5,-0.809017,),(-0.698401,-0.5,-0.698401,),(-0.698401,0.5,-0.698401,),(-0.698401,-0.5,-0.698401,),(-0.809017,-0.5,-0.587785,),(-0.951057,-0.5,-0.309017,),(-1,-0.5,0,),(-1,0.5,0,),(-1,-0.5,0,),(-0.951057,-0.5,0.309017,),(-0.809017,-0.5,0.587785,),(-0.698401,-0.5,0.698401,),(-0.698401,0.5,0.698401,),(-0.698401,-0.5,0.698401,),(-0.587785,-0.5,0.809017,),(-0.309017,-0.5,0.951057,),(-2.98023e-008,-0.5,1,),(-2.98023e-008,0.5,1)] ,
                'stick'         : [(0,0,0),(0,1.499085,0),(0.0523598,1.501829,0),(0.104146,1.510032,0),(0.154791,1.523602,0),(0.20374,1.542392,0),(0.250457,1.566195,0),(0.29443,1.594752,0),(0.335177,1.627748,0),(0.372252,1.664823,0),(0.405248,1.70557,0),(0.433805,1.749543,0),(0.457608,1.79626,0),(0.476398,1.845209,0),(0.489968,1.895854,0),(0.498171,1.94764,0),(0.500915,2,0),(0.498171,2.05236,0),(0.489968,2.104146,0),(0.476398,2.154791,0),(0.457608,2.20374,0),(0.433805,2.250457,0),(0.405248,2.29443,0),(0.372252,2.335177,0),(0.335177,2.372252,0),(0.29443,2.405248,0),(0.250457,2.433805,0),(0.20374,2.457608,0),(0.154791,2.476398,0),(0.104146,2.489968,0),(0.0523598,2.498171,0),(0,2.500915,0),(-0.0523598,2.498171,0),(-0.104146,2.489968,0),(-0.154791,2.476398,0),(-0.20374,2.457608,0),(-0.250457,2.433805,0),(-0.29443,2.405248,0),(-0.335177,2.372252,0),(-0.372252,2.335177,0),(-0.405248,2.29443,0),(-0.433805,2.250457,0),(-0.457608,2.20374,0),(-0.476398,2.154791,0),(-0.489968,2.104146,0),(-0.498171,2.05236,0),(-0.500915,2,0),(-0.498171,1.94764,0),(-0.489968,1.895854,0),(-0.476398,1.845209,0),(-0.457608,1.79626,0),(-0.433805,1.749543,0),(-0.405248,1.70557,0),(-0.372252,1.664823,0),(-0.335177,1.627748,0),(-0.29443,1.594752,0),(-0.250457,1.566195,0),(-0.20374,1.542392,0),(-0.154791,1.523602,0),(-0.104146,1.510032,0),(-0.0523598,1.501829,0),(0,1.499085,0),(0,2.576874,0),(0,2,0),(0.576874,2,0),(-0.576874,2,0)] ,
                'circle'        : [(1.125,0,0),(1.004121,0,0),(0.991758,0,-0.157079),(0.954976,0,-0.31029),(0.894678,0,-0.455861) ,(0.812351,0,-0.590207),(0.710021,0,-0.710021),(0.590207,0,-0.812351),(0.455861,0,-0.894678),(0.31029,0,-0.954976),(0.157079,0,-0.991758),(0,0,-1.004121),(0,0,-1.125),(0,0,-1.004121),(-0.157079,0,-0.991758),(-0.31029,0,-0.954976),(-0.455861,0,-0.894678),(-0.590207,0,-0.812351),(-0.710021,0,-0.710021),(-0.812351,0,-0.590207),(-0.894678,0,-0.455861) ,(-0.954976,0,-0.31029),(-0.991758,0,-0.157079),(-1.004121,0,0),(-1.125,0,0),(-1.004121,0,0),(-0.991758,0,0.157079),(-0.954976,0,0.31029),(-0.894678,0,0.455861),(-0.812351,0,0.590207),(-0.710021,0,0.710021),(-0.590207,0,0.812351),(-0.455861,0,0.894678),(-0.31029,0,0.954976),(-0.157079,0,0.991758),(0,0,1.004121),(0,0,1.125) ,(0,0,1.004121),(0.157079,0,0.991758),(0.31029,0,0.954976),(0.455861,0,0.894678),(0.590207,0,0.812351),(0.710021,0,0.710021),(0.812351,0,0.590207),(0.894678,0,0.455861),(0.954976,0,0.31029),(0.991758,0,0.157079),(1.004121,0,0)] ,
                'arrowBall'     : [(-0.101079,1.958922,0.406811),(-0.101079,1.849883,0.83017),(-0.101079,1.66815,1.093854),(-0.354509,1.66815,1.093854),(0,1.322858,1.357538),(0.354509,1.66815,1.093854),(0.101079,1.66815,1.093854),(0.101079,1.849883,0.83017),(0.101079,1.958922,0.406811),(0.527367,1.849883,0.406811),(0.791052,1.66815,0.406811),(0.791052,1.66815,0.657311),(1.054736,1.322858,0.302802),(0.791052,1.66815,-0.0517064),(0.791052,1.66815,0.198794),(0.527367,1.849883,0.198794),(0.101079,1.958922,0.198794),(0.101079,1.849883,-0.224565),(0.101079,1.66815,-0.488249),(0.354509,1.66815,-0.488249),(0,1.322858,-0.751934),(-0.354509,1.66815,-0.488249),(-0.101079,1.66815,-0.488249),(-0.101079,1.849883,-0.224565),(-0.101079,1.958922,0.198794),(-0.527367,1.849883,0.198794),(-0.791052,1.66815,0.198794),(-0.791052,1.66815,-0.0517064),(-1.054736,1.322858,0.302802),(-0.791052,1.66815,0.657311),(-0.791052,1.66815,0.406811),(-0.527367,1.849883,0.406811),(-0.101079,1.958922,0.406811)] ,
                'arrowCircle'   : [(-0.407582,0,2.049652),(-0.52278,0,2.613902),(-1.045561,0,2.613902),(1.37739e-008,0,3.659463),(1.045561,0,2.613902),(0.52278,0,2.613902),(0.407582,0,2.049652),(1.161124,0,1.737523),(1.737531,0,1.161114),(2.049654,0,0.407569),(2.613902,0,0.52278),(2.613902,0,1.045561),(3.659463,0,0),(2.613902,0,-1.045561),(2.613902,0,-0.52278),(2.049648,0,-0.407595),(1.737521,0,-1.16114),(1.161091,0,-1.73752),(0.407573,0,-2.049738) ,(0.52278,0,-2.613902),(1.045561,0,-2.613902),(1.37739e-008,0,-3.659463),(-1.045561,0,-2.613902),(-0.52278,0,-2.613902),(-0.407573,0,-2.049738),(-1.161091,0,-1.73752),(-1.737521,0,-1.16114),(-2.049648,0,-0.407595),(-2.613902,0,-0.52278),(-2.613902,0,-1.045561),(-3.659463,0,0),(-2.613902,0,1.045561),(-2.613902,0,0.52278),(-2.049654,0,0.407569),(-1.737531,0,1.161114),(-1.161124,0,1.737523),(-0.407582,0,2.04965)] ,
                'pyramid'       : [(-0.999999,0.0754167,-0.999999),(-0.999999,0.0754167,0.999999),(0.999999,0.0754167,0.999999),(0.999999,0.0754167,-0.999999),(-0.999999,0.0754167,-0.999999),(-0.999999,-0.0695844,-0.999999),(-0.112596,-1,-0.112596),(-0.112596,-1,0.112596),(0.112596,-1,0.112596),(0.999999,-0.0695844,0.999999),(0.999999,0.0754167,0.999999),(0.999999,-0.0695844,0.999999),(-0.999999,-0.0695844,0.999999),(-0.999999,0.0754167,0.999999),(-0.999999,-0.0695844,0.999999),(-0.112596,-1,0.112596),(-0.999999,-0.0695844,0.999999),(-0.999999,-0.0695844,-0.999999),(0.999999,-0.0695844,-0.999999),(0.999999,0.0754167,-0.999999),(0.999999,-0.0695844,-0.999999),(0.112596,-1,-0.112596),(-0.112596,-1,-0.112596),(0.112596,-1,-0.112596),(0.112596,-1,0.112596),(0.112596,-1,-0.112596),(0.999999,-0.0695844,-0.999999),(0.999999,-0.0695844,0.999999)] ,
                'capsule'       : [(-2.011489,0,0),(-1.977023,0.261792,0),(-1.875975,0.505744,0),(-1.71523,0.71523,0),(-1.505744,0.875975,0),(-1.261792,0.977023,0),(-1,1.011489,0),(1,1.011489,0),(1.261792,0.977023,0),(1.505744,0.875975,0),(1.71523,0.71523,0),(1.875975,0.505744,0),(1.977023,0.261792,0),(2.011489,0,0),(1.977023,-0.261792,0),(1.875975,-0.505744,0),(1.71523,-0.71523,0),(1.505744,-0.875975,0),(1.261792,-0.977023,0),(1,-1.011489,0),(-1,-1.011489,0),(-1.261792,-0.977023,0),(-1.505744,-0.875975,0), (-1.71523,-0.71523,0),(-1.875975,-0.505744,0),(-1.977023,-0.261792,0),(-2.011489,0,0)] ,
                'arrowCross'    : [(-3.629392,0,-2.087399),(-3.629392,0,-1.723768),(-1.723768,0,-1.723768),(-1.723768,0,-3.629392),(-2.087399,0,-3.629392),(0,0,-5.704041),(2.087399,0,-3.629392),(1.723768,0,-3.629392),(1.723768,0,-1.723768),(3.629392,0,-1.723768),(3.629392,0,-2.087399),(5.704041,0,0),(3.629392,0,2.087399),(3.629392,0,1.723768),(1.723768,0,1.723768),(1.723768,0,3.629392),(2.087399,0,3.629392),(0,0,5.704041),(-2.087399,0,3.629392),(-1.723768,0,3.629392),(-1.723768,0,1.723768),(-3.629392,0,1.723768),(-3.629392,0,2.087399),(-5.704041,0,0),(-3.629392,0,-2.087399)] ,
                'triangle'      : [(-1,0,1,),(-1,0,1,),(-0.9,0,0.8,),(-0.8,0,0.6,),(-0.7,0,0.4,),(-0.6,0,0.2,),(-0.5,0,0,),(-0.4,0,-0.2,),(-0.3,0,-0.4,),(-0.2,0,-0.6,),(-0.1,0,-0.8,),(0,0,-1,),(0.1,0,-0.8,),(0.2,0,-0.6,),(0.3,0,-0.4,),(0.4,0,-0.2,),(0.5,0,0,),(0.6,0,0.2,),(0.7,0,0.4,),(0.8,0,0.6,),(0.9,0,0.8,),(1,0,1,),(0.8,0,1,),(0.6,0,1,),(0.4,0,1,),(0.2,0,1,),(0,0,1,),(-0.2,0,1,),(-0.4,0,1,),(-0.6,0,1,),(-0.8,0,1,),(-1,0,1)] ,
                'drop'          : [(0,0,-2.28198),(0.585544,0,-1.569395),(1.08325,0,-1.071748),(1.413628,0,-0.588119) ,(1.531946,0,0.00057226),(1.413628,0,0.585419),(1.08325,0,1.083278),(0.585544,0,1.413621) ,(0,0,1.531949),(-0.585544,0,1.413621),(-1.08325,0,1.083277),(-1.413628,0,0.585419) ,(-1.531946,0,0.000554983),(-1.413628,0,-0.588078),(-1.08325,0,-1.071626),(-0.585544,0,-1.570833),(0,0,-2.28198)] ,
                'plus'          : [(-0.545455,0,2),(0.545455,0,2),(0.545455,0,0.545455),(2,0,0.545455),(2,0,-0.545455),(0.545455,0,-0.545455),(0.545455,0,-2),(-0.545455,0,-2),(-0.545455,0,-0.545455),(-2,0,-0.545455),(-2,0,0.545455),(-0.545455,0,0.545455),(-0.545455,0,2)] ,
                'daimond'       : [(0,1,0,),(0,0,0.625,),(0,-1,0,),(0.625,0,0,),(0,1,0,),(0,0,-0.625,),(0,-1,0,),(-0.625,0,0,),(0,1,0,),(0.625,0,0,),(0,0,-0.625,),(-0.625,0,0,),(0,0,0.625,),(0.625,0,0)] ,
                'square'        : [(0,0,-1.12558),(0,0,-1),(-1,0,-1),(-1,0,0),(-1.12558,0,0),(-1,0,0),(-1,0,1),(0,0,1),(0,0,1.12558),(0,0,1),(1,0,1),(1,0,0),(1.12558,0,0),(1,0,0),(1,0,-1),(0,0,-1)] ,
                'cube'          : [(1,-1,1),(1,1,1),(1,1,-1),(1,-1,-1),(-1,-1,-1),(-1,1,-1),(-1,1,1),(-1,-1,1),(1,-1,1),(1,-1,-1),(-1,-1,-1),(-1,-1,1),(-1,1,1),(1,1,1),(1,1,-1),(-1,1,-1)] ,
                'arrow'         : [(-1,0,0,),(0,0,-1,),(1,0,0,),(0.4,0,0,),(0.4,0,1,),(-0.4,0,1,),(-0.4,0,0,),(-1,0,0)],
                'locator'       : [(0,1,0),(0,-1,0),(0,0,0),(-1,0,0),(1,0,0),(0,0,0),(0,0,-1),(0,0,1)] ,
                'null'          : [(0,0,0),(0,0,0),(0,0,0)] ,
                'line'          : [(0.3,0,0),(-0.3,0,0)] }
    
    if shape in crvDict.keys() :
        return mc.curve( n = name , d = 1 , p = crvDict[shape] )
        
def getParent( obj = '' ) :
    return mc.listRelatives( obj , p = True )
            
def getSide( obj = '' ) :
    sides = [ 'LFT' , 'RGT' , 'CEN' , 'Lft' , 'Rgt' , 'Cen' , 
              'lft' , 'rgt' , 'cen' ]
    
    currentSide = ''
    for side in sides :
        if side in obj :
            currentSide = '_%s' %side
    
    return currentSide
    
def addCtrl( name = '' , shape = '' , col = '' , traget = '' , jnt = False ) :
    ctrl = createCurve( name , shape )
    correctShapeName( ctrl )
    setColor( ctrl , col )
    
    if traget :
        snap( traget , ctrl )

    if jnt == True :
        addJntCtrl( ctrl )
    
    return ctrl

def addGrp( obj = '' , type = 'Zro' ) :
    # obj = mc.ls( sl = True )[0]
    prefix = obj.split( '_' )[0]
    sufffix = obj.split( '_' )[-1]
    sufffix = sufffix.capitalize()
    side = getSide( obj )
    
    grp = transform( '%s%s%s%s_grp' %( prefix , sufffix , type , side ))
    pars = getParent( obj )
    
    snap( obj , grp )
    mc.parent( obj , grp )
    
    if pars :
        mc.parent( grp , pars )
        
    mc.select( cl = True )
    return grp

def addGimbal( obj = '' ) :
    # obj = mc.ls( sl = True )[0]
    prefix = obj.split( '_' )[0]
    suffix = obj.replace( prefix , '' )
        
    gmb = mc.duplicate( obj )
    gmb = mc.rename( gmb , '%sGmbl%s' %( prefix , suffix ))
    
    objShape = getShape( obj )
    gmbShape = getShape( gmb )
    
    addAttr( objShape , 'gimbalVis' , 0 , 1 , 0 )
    mc.connectAttr( '%s.gimbalVis' %objShape , '%s.v' %gmbShape )
    
    mc.connectAttr( '%s.rotateOrder' %obj , '%s.rotateOrder' %gmb )
    setColor( gmb , 'white' )
    scaleShape( gmb , 0.8 )
    
    snap( obj , gmb )
    mc.parent( gmb , obj )
    
    mc.select( cl = True )
    return gmb

def translateShape( obj  , target ) :
    piv = getPivot( obj )
    shape = getShape( obj )

    degree = mc.getAttr( '%s.degree' %shape )
    spans = mc.getAttr( '%s.spans' %shape )

    cv = ( degree + spans ) - 1

    tx = mc.getAttr( '%s.tx' %target )
    ty = mc.getAttr( '%s.ty' %target )
    tz = mc.getAttr( '%s.tz' %target )

    mc.select( obj + '.cv[0:%s]' %cv )
    mc.move( tx ,ty ,tz , r = True , os = True , wd = True )
    mc.select( cl = True )


def rotateShape( obj , rx , ry , rz ) :
    piv = getPivot( obj )
    shape = getShape( obj )

    degree = mc.getAttr( '%s.degree' %shape )
    spans = mc.getAttr( '%s.spans' %shape )

    cv = ( degree + spans ) - 1

    mc.select( obj + '.cv[0:%s]' %cv )
    mc.rotate( rx ,ry ,rz , r = True ,  p = ( piv[0] , piv[1] , piv[2] ))
    mc.select( cl = True )


def scaleShape( obj , value ) :
    shape = getShape( obj )

    degree = mc.getAttr( '%s.degree' %shape )
    spans = mc.getAttr( '%s.spans' %shape )

    cv = ( degree + spans ) - 1

    mc.select( obj + '.cv[0:%s]' %cv )
    mc.scale( value , value , value )
    mc.select( cl = True )
    
def correctShapeName( obj = '' ) :
    shapes = getShape( obj )
    return mc.rename( shapes , '%sShape' %obj )

def getShape( obj = '' ) :
    return mc.listRelatives( obj , shapes = True )[0]        

def setColor( obj = '' , col = '' ) :
    shape = getShape( obj )
    
    colDict = { 'black'         : 1 ,
                'gray'          : 2 ,
                'softGray'      : 3 ,
                'darkRed'       : 4 ,
                'darkBlue'      : 5 ,
                'blue'          : 6 ,
                'darkGreen'     : 7 ,
                'brown'         : 11 ,
                'red'           : 13 ,
                'green'         : 14 ,
                'white'         : 16 ,
                'yellow'        : 17 ,
                'cyan'          : 18 }
    
    if type( col ) == type( str() ) :
        if col in colDict.keys() :
            colId = colDict[col]
        else :
            colId = 0
    else :
        colId = col
    
    mc.setAttr( '%s.overrideEnabled' %shape , 1 )
    mc.setAttr( '%s.overrideColor' %shape , colId )

def getPivot( obj = '' ) :
    return mc.xform( obj , q = True , t = True , ws = True  )

def addAttr( obj = '' , attrName = '' , minVal = None , maxVal = None , defaultVal = None ) :
    if not mc.objExists( '%s.%s' %( obj , attrName )) :
        mc.addAttr( obj , ln = attrName , at = 'float' , k = True )
        
        if not minVal == None :
            mc.addAttr( '%s.%s' %( obj , attrName ) , e = True , min = int(minVal) )
        
        if not maxVal == None :
            mc.addAttr( '%s.%s' %( obj , attrName ) , e = True , max = int(maxVal) )
        
        if not defaultVal == None :
            mc.addAttr( '%s.%s' %( obj , attrName ) , e = True , dv = int(defaultVal) )

def setRotateOrder( obj = '' , rotateOrder = '' ) :
    dict = { 'xyz' : 0 ,
             'yzx' : 1 ,
             'zxy' : 2 ,
             'xzy' : 3 ,
             'yxz' : 4 ,
             'zyx' : 5 }
    
    if rotateOrder in dict.keys() :
        val = dict[ rotateOrder ]
    else :
        val = rotateOrder
        
    mc.setAttr( '%s.rotateOrder' %obj , val )

def parent( *args ) :
    check = len( args )

    for i in range(1,check) :
        mc.parent( args[i-1] , args[i] )
        mc.select( cl = True )
   
def setLockHide( obj = '' , *args ) :
    for attr in args :
        mc.setAttr( '%s.%s' %( obj , attr ) , l = True , k = False , cb = False )

def setVal( obj = '' , val = '' ) :
    name , attr = obj.split('.')
    lockAttr = mc.getAttr( obj , l = True )
    
    if lockAttr == True :
        mc.setAttr( obj , lock = False )
        mc.setAttr( obj , val )
        mc.setAttr( obj , lock = True )
    else :
        mc.setAttr( obj , val )
                                            
def rigMain( charSize = 1 ) :
    sel = mc.ls(sl = True)

    #-- Group
    rigGrp = transform( 'Rig_Grp' )
    geoGrp = transform( 'Geo_Grp' )
    
    #-- Controls
    masterCtrl = addCtrl( 'Place_Ctrl' , 'square' , 'yellow' )
    placementCtrl = addCtrl( 'Offset_Ctrl' , 'arrowCross' , 'yellow' )
    
    #-- Shape
    rotateShape( masterCtrl , 0 , 45 , 0 )
    scaleShape( masterCtrl , charSize * 7 )
    scaleShape( placementCtrl , charSize * 1.5 )
    
    #-- Rig process
    mc.parent( sel , geoGrp )

    if len(sel) == 1 :
        mc.parentConstraint( placementCtrl , geoGrp , mo = True )
        mc.scaleConstraint( placementCtrl , geoGrp , mo = True )

    elif len(sel) >= 1 :
        ctrlGrp = transform( 'Ctrl_Grp' )
        mc.parent( ctrlGrp , placementCtrl )

        i = 1
        for obj in sel :
            ctrl = addCtrl( 'Sub%s_Ctrl' %i , 'square' , 'red' )
            gmbl = addGimbal( ctrl )
            zro = addGrp( ctrl )
            snap( obj , zro )
            mc.parentConstraint( gmbl , obj , mo = 0 )
            mc.scaleConstraint( gmbl , obj , mo = 0 )
            mc.parent( zro , ctrlGrp )

            i +=1
    
    #-- Hierarchy
    parent( placementCtrl , masterCtrl )
    mc.parent( geoGrp , masterCtrl , rigGrp )
    
    #-- Cleanup
    for grp in ( rigGrp , geoGrp ) :
        setLockHide( grp , 'tx' , 'ty' , 'tz' , 'rx' , 'ry' , 'rz' , 'sx' , 'sy' , 'sz' )
    
    for ctrl in ( masterCtrl , placementCtrl  ) :
        setLockHide( ctrl , 'sx' , 'sy' , 'sz' , 'v' )
    
    mc.select( cl = True )


def mainCtrl():
    rigMain( charSize = 1 )